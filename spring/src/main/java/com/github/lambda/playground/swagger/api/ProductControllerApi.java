/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.lambda.playground.swagger.api;

import com.github.lambda.playground.swagger.model.Failure;
import com.github.lambda.playground.swagger.model.Product;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-03T19:16:43.113+09:00")

@Api(value = "ProductController", description = "the ProductController API")
public interface ProductControllerApi {

    Logger log = LoggerFactory.getLogger(ProductControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "findOneWithOptions", notes = "", response = Product.class, tags={ "product-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Product.class),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/product/{productID}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Product> findOneWithOptions(@ApiParam(value = "",required=true) @PathVariable("productID") String productID) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"imageID\" : \"imageID\",  \"categoryPath\" : \"categoryPath\",  \"imagePath\" : \"imagePath\",  \"categoryDisplayName\" : \"categoryDisplayName\",  \"description\" : \"description\",  \"createdAt\" : \"createdAt\",  \"price\" : \"price\",  \"name\" : \"name\",  \"options\" : [ {    \"price\" : \"price\",    \"name\" : \"name\",    \"description\" : \"description\",    \"onSale\" : \"onSale\",    \"id\" : \"id\"  }, {    \"price\" : \"price\",    \"name\" : \"name\",    \"description\" : \"description\",    \"onSale\" : \"onSale\",    \"id\" : \"id\"  } ],  \"onSale\" : \"onSale\",  \"id\" : \"id\",  \"imageType\" : \"imageType\",  \"categoryID\" : \"categoryID\",  \"updatedAt\" : \"updatedAt\"}", Product.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProductControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
