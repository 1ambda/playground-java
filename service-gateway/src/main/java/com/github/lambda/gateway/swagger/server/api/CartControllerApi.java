/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.github.lambda.gateway.swagger.server.api;

import com.github.lambda.gateway.swagger.model.CartDTO;
import com.github.lambda.gateway.swagger.model.CartLineDTO;
import com.github.lambda.gateway.swagger.model.CartLineOptionDTO;
import com.github.lambda.gateway.swagger.model.CartLineOptionRequestDTO;
import com.github.lambda.gateway.swagger.model.CartLineRequestDTO;
import com.github.lambda.gateway.swagger.model.Failure;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "CartController", description = "the CartController API")
public interface CartControllerApi {

    Logger log = LoggerFactory.getLogger(CartControllerApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "addUserCartLine", notes = "", response = CartLineDTO.class, tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CartLineDTO.class),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/lines",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CartLineDTO> addUserCartLine(@ApiParam(value = ""  )  @Valid @RequestBody CartLineDTO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 2,  \"quantity\" : 3,  \"productId\" : 2,  \"totalPrice\" : \"totalPrice\",  \"cartLineID\" : 5,  \"cartLineOptions\" : [ {    \"createdAt\" : 1,    \"quantity\" : 1,    \"productOptionId\" : 1,    \"cartLineOptionId\" : 4,    \"productOptionPrice\" : 6,    \"updatedAt\" : 7  }, {    \"createdAt\" : 1,    \"quantity\" : 1,    \"productOptionId\" : 1,    \"cartLineOptionId\" : 4,    \"productOptionPrice\" : 6,    \"updatedAt\" : 7  } ],  \"index\" : 9,  \"productPrice\" : \"productPrice\",  \"updatedAt\" : 7}", CartLineDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "clearUserCartLines", notes = "", tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/lines",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> clearUserCartLines() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getUserCartLines", notes = "", response = CartDTO.class, tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CartDTO.class),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/lines",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CartDTO> getUserCartLines() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"totalPrice\" : 1,  \"cartId\" : 0,  \"cartLines\" : [ {    \"createdAt\" : 2,    \"quantity\" : 3,    \"productId\" : 2,    \"totalPrice\" : \"totalPrice\",    \"cartLineID\" : 5,    \"cartLineOptions\" : [ {      \"createdAt\" : 1,      \"quantity\" : 1,      \"productOptionId\" : 1,      \"cartLineOptionId\" : 4,      \"productOptionPrice\" : 6,      \"updatedAt\" : 7    }, {      \"createdAt\" : 1,      \"quantity\" : 1,      \"productOptionId\" : 1,      \"cartLineOptionId\" : 4,      \"productOptionPrice\" : 6,      \"updatedAt\" : 7    } ],    \"index\" : 9,    \"productPrice\" : \"productPrice\",    \"updatedAt\" : 7  }, {    \"createdAt\" : 2,    \"quantity\" : 3,    \"productId\" : 2,    \"totalPrice\" : \"totalPrice\",    \"cartLineID\" : 5,    \"cartLineOptions\" : [ {      \"createdAt\" : 1,      \"quantity\" : 1,      \"productOptionId\" : 1,      \"cartLineOptionId\" : 4,      \"productOptionPrice\" : 6,      \"updatedAt\" : 7    }, {      \"createdAt\" : 1,      \"quantity\" : 1,      \"productOptionId\" : 1,      \"cartLineOptionId\" : 4,      \"productOptionPrice\" : 6,      \"updatedAt\" : 7    } ],    \"index\" : 9,    \"productPrice\" : \"productPrice\",    \"updatedAt\" : 7  } ],  \"updatedAt\" : 6,  \"itemCount\" : 5}", CartDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "removeUserCartLine", notes = "", tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/line/{lineId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> removeUserCartLine(@ApiParam(value = "",required=true) @PathVariable("lineId") Long lineId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "removeUserCartLineOption", notes = "", tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/line/{lineId}/option/{optionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> removeUserCartLineOption(@ApiParam(value = "",required=true) @PathVariable("lineId") Long lineId,@ApiParam(value = "",required=true) @PathVariable("optionId") Long optionId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateUserCartLine", notes = "", response = CartLineDTO.class, tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CartLineDTO.class),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/line/{lineId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<CartLineDTO> updateUserCartLine(@ApiParam(value = "",required=true) @PathVariable("lineId") Long lineId,@ApiParam(value = ""  )  @Valid @RequestBody CartLineRequestDTO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 2,  \"quantity\" : 3,  \"productId\" : 2,  \"totalPrice\" : \"totalPrice\",  \"cartLineID\" : 5,  \"cartLineOptions\" : [ {    \"createdAt\" : 1,    \"quantity\" : 1,    \"productOptionId\" : 1,    \"cartLineOptionId\" : 4,    \"productOptionPrice\" : 6,    \"updatedAt\" : 7  }, {    \"createdAt\" : 1,    \"quantity\" : 1,    \"productOptionId\" : 1,    \"cartLineOptionId\" : 4,    \"productOptionPrice\" : 6,    \"updatedAt\" : 7  } ],  \"index\" : 9,  \"productPrice\" : \"productPrice\",  \"updatedAt\" : 7}", CartLineDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateUserCartLineOption", notes = "", response = CartLineOptionDTO.class, tags={ "cart-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CartLineOptionDTO.class),
        @ApiResponse(code = 200, message = "error", response = Failure.class) })
    @RequestMapping(value = "/cart/user/line/{lineId}/option/{optionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<CartLineOptionDTO> updateUserCartLineOption(@ApiParam(value = "",required=true) @PathVariable("lineId") Long lineId,@ApiParam(value = "",required=true) @PathVariable("optionId") Long optionId,@ApiParam(value = ""  )  @Valid @RequestBody CartLineOptionRequestDTO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"createdAt\" : 1,  \"quantity\" : 1,  \"productOptionId\" : 1,  \"cartLineOptionId\" : 4,  \"productOptionPrice\" : 6,  \"updatedAt\" : 7}", CartLineOptionDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default CartControllerApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
